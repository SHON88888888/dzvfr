# bot.py
from telegram import Update, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import os
from gpt_assistant import answer_question_with_context
from vector_store import init_vector_store

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv(dotenv_path="/opt/dzvfr/.env")
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã ===
vector_store = init_vector_store()

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ chat_id ===
session_memory = {}

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–Ø ‚Äî –Ω–µ–π—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏–º –æ—Ç—á—ë—Ç–∞–º. –ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º –∏ –æ—Ç—á—ë—Ç–∞–º."
    )

async def list_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    docs = vector_store.similarity_search("–ø—Ä–æ–≤–µ—Ä–∫–∞", k=200)
    seen = set()
    for doc in docs:
        src = doc.metadata.get("source", "").strip()
        if src:
            seen.add(src)
    if not seen:
        await update.message.reply_text("‚ùå –ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.")
        return
    report_list = "\n".join(f"‚Ä¢ {name}" for name in sorted(seen))
    await update.message.reply_text(f"üìÑ –û—Ç—á—ë—Ç—ã –≤ –±–∞–∑–µ:\n{report_list}")

# === –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text
    chat_id = update.message.chat_id

    history = session_memory.get(chat_id, [])
    response = answer_question_with_context(user_input, vector_store, history)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
    history.append({"role": "user", "content": user_input})
    history.append({"role": "assistant", "content": response})
    session_memory[chat_id] = history[-10:]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–∞–º—è—Ç—å –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

    await update.message.reply_text(response)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = ApplicationBuilder().token(TG_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("reports", list_reports))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ Telegram...")
    app.run_polling()
